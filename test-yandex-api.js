#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Disk API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
 */

const https = require('https');

const YANDEX_OAUTH_TOKEN = 'y0__xDpo-JiGJukOiDCr6CzFFRUktGhbaL_5rLrM8cKgh1409tx';

function makeRequest(path, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
        const options = {
            hostname: 'cloud-api.yandex.net',
            port: 443,
            path: path,
            method: method,
            headers: {
                'Authorization': `OAuth ${YANDEX_OAUTH_TOKEN}`,
                'Content-Type': 'application/json'
            }
        };

        const req = https.request(options, (res) => {
            let responseData = '';
            
            res.on('data', (chunk) => {
                responseData += chunk;
            });
            
            res.on('end', () => {
                try {
                    const response = responseData ? JSON.parse(responseData) : {};
                    resolve({ status: res.statusCode, data: response });
                } catch (error) {
                    resolve({ status: res.statusCode, data: responseData });
                }
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(JSON.stringify(data));
        }
        
        req.end();
    });
}

async function checkDiskInfo() {
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–µ...');
    
    try {
        const response = await makeRequest('/v1/disk');
        
        if (response.status === 200) {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Disk —É—Å–ø–µ—à–Ω–æ!');
            console.log(`   –û–±—â–∏–π –æ–±—ä–µ–º: ${Math.round(response.data.total_space / 1024 / 1024 / 1024)} –ì–ë`);
            console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${Math.round(response.data.used_space / 1024 / 1024 / 1024)} –ì–ë`);
            console.log(`   –°–≤–æ–±–æ–¥–Ω–æ: ${Math.round((response.data.total_space - response.data.used_space) / 1024 / 1024 / 1024)} –ì–ë\n`);
            return true;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex Disk');
            console.log(`   –°—Ç–∞—Ç—É—Å: ${response.status}`);
            console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}\n`);
            return false;
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
        return false;
    }
}

async function createDirectory(path) {
    console.log(`üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É: ${path}`);
    
    try {
        const response = await makeRequest(`/v1/disk/resources?path=${encodeURIComponent(path)}`, 'PUT');
        
        if (response.status === 201) {
            console.log(`   ‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${path}`);
            return true;
        } else if (response.status === 409) {
            console.log(`   ‚ÑπÔ∏è  –ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${path}`);
            return true;
        } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: ${response.status}`);
            console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}`);
            return false;
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

async function listDirectory(path) {
    console.log(`üìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏: ${path}`);
    
    try {
        const response = await makeRequest(`/v1/disk/resources?path=${encodeURIComponent(path)}`);
        
        if (response.status === 200) {
            if (response.data._embedded && response.data._embedded.items) {
                const items = response.data._embedded.items;
                console.log(`   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${items.length}`);
                
                items.forEach(item => {
                    const type = item.type === 'dir' ? 'üìÅ' : 'üìÑ';
                    console.log(`   ${type} ${item.name}`);
                });
            } else {
                console.log('   –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞');
            }
            return true;
        } else if (response.status === 404) {
            console.log('   ‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        } else {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status}`);
            console.log(`   –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}`);
            return false;
        }
    } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

async function setupProjectStructure() {
    console.log('üèóÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞...\n');
    
    const directories = [
        '/Homework_App',
        '/Homework_App/Submissions',
        '/Homework_App/Submissions/5–ê',
        '/Homework_App/Submissions/5–ë',
        '/Homework_App/Submissions/6–ê',
        '/Homework_App/Submissions/6–ë',
        '/Homework_App/Submissions/7–ê',
        '/Homework_App/Submissions/7–ë',
        '/Homework_App/Submissions/8–ê',
        '/Homework_App/Submissions/8–ë',
        '/Homework_App/Submissions/9–ê',
        '/Homework_App/Submissions/9–ë',
        '/Homework_App/Submissions/10–ê',
        '/Homework_App/Submissions/10–ë',
        '/Homework_App/Submissions/11–ê',
        '/Homework_App/Submissions/11–ë',
        '/Homework_App/Records'
    ];
    
    for (const dir of directories) {
        await createDirectory(dir);
    }
    
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...\n');
    
    await listDirectory('/Homework_App');
    await listDirectory('/Homework_App/Submissions');
}

async function main() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Yandex Disk API');
    console.log('================================\n');
    
    const connected = await checkDiskInfo();
    
    if (connected) {
        await setupProjectStructure();
        
        console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Netlify —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
        console.log(`YANDEX_OAUTH_TOKEN=${YANDEX_OAUTH_TOKEN}`);
    }
}

main().catch(console.error);
